x = "Gender", y = "Weight (kg)"
) +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#619CFF")) +
theme_minimal()
# Pakker
library(ggplot2)
library(dplyr)
# Plot 1: Snout Length by Gender
ggplot(T6.19, aes(x = Gender, y = `Snout Vent Length (cm)`, fill = Gender)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(
title = "Violin Plot: Snout Length by Gender",
x = "Gender",
y = "Snout Length (cm)"
) +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#619CFF")) +
theme_minimal()
# Plot 2: Weight by Gender
ggplot(T6.19, aes(x = Gender, y = `Weight (kg)`, fill = Gender)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(
title = "Violin Plot: Weight by Gender",
x = "Gender",
y = "Weight (kg)"
) +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#619CFF")) +
theme_minimal()
# Udvælg de første 3 observationer (uanset køn)
X <- as.matrix(T6.19[1:3, 1:2])  # 3x2 matrix (Snout, Weight)
# Beregn middelvektor (kolonnegennemsnit)
x_bar <- colMeans(X)
# Lav 1-vektor
Ones <- rep(1, nrow(X))
# Beregn afvigelsesmatrix: Y = X - 1 * x_bar^T
Y <- X - Ones %*% t(x_bar)
# Udtræk kolonnerne som vektorer
Y1 <- Y[,1]  # Snout
Y2 <- Y[,2]  # Weight
# Beregn længder
Ly1 <- sqrt(sum(Y1^2))
Ly2 <- sqrt(sum(Y2^2))
# Beregn cosinus og vinkel
costh <- sum(Y1 * Y2) / (Ly1 * Ly2)
ang <- acos(costh) * 180 / pi
# Varians, kovarians og korrelation
s11 <- sum(Y1^2) / nrow(X)
s22 <- sum(Y2^2) / nrow(X)
s12 <- sum(Y1 * Y2) / nrow(X)
r12 <- s12 / sqrt(s11 * s22)
# Print resultater
cat("Afvigelsesvektorer for Anaconda-data (første 3 rækker):\n\n")
cat("Længde af afvigelsesvektor Snout:", Ly1, "\n")
cat("Længde af afvigelsesvektor Weight:", Ly2, "\n")
cat("Cosinus til vinkel mellem vektorer:", costh, "\n")
cat("Vinkel mellem vektorer (grader):", ang, "\n\n")
cat("Varians af Snout:", s11, "\n")
cat("Varians af Weight:", s22, "\n")
cat("Kovarians:", s12, "\n")
cat("Korrelationskoefficient:", r12, "\n")
# Udtræk de første 3 observationer (Snout og Weight)
X <- as.matrix(T6.19[1:3, 1:2])
x_bar <- colMeans(X)
Ones <- rep(1, 3)
# Afvigelsesmatrix: Y = X - 1 * x_bar^T
Y <- X - Ones %*% t(x_bar)
# Udtræk kolonner
Y1 <- Y[,1]  # Snout
Y2 <- Y[,2]  # Weight
# Plot setup
plot(NA, xlim = range(c(0, Y1)), ylim = range(c(0, Y2)),
xlab = "Snout deviation", ylab = "Weight deviation",
main = "Afvigelsesvektorer fra origo (2D)", asp = 1)
grid()
# Tegn vektorer fra origo (0,0)
arrows(0, 0, Y1[1], Y2[1], col = "red", lwd = 2)
arrows(0, 0, Y1[2], Y2[2], col = "blue", lwd = 2)
arrows(0, 0, Y1[3], Y2[3], col = "darkgreen", lwd = 2)
# Tilføj labels
text(Y1[1], Y2[1], labels = "Y1", pos = 4, col = "red")
text(Y1[2], Y2[2], labels = "Y2", pos = 4, col = "blue")
text(Y1[3], Y2[3], labels = "Y3", pos = 4, col = "darkgreen")
# Udtræk de første 5 observationer for hver køn
T6.19_5females <- T6.19[T6.19$Gender == "Female", ][1:5, 1:2]
T6.19_5males   <- T6.19[T6.19$Gender == "Male",   ][1:5, 1:2]
# Kombiner i én matrix (2 rækker, 5 kolonner pr variabel)
snout_matrix <- rbind(
T6.19_5males$`Snout Vent Length (cm)`,
T6.19_5females$`Snout Vent Length (cm)`
)
rownames(snout_matrix) <- c("Male", "Female")
weight_matrix <- rbind(
T6.19_5males$`Weight (kg)`,
T6.19_5females$`Weight (kg)`
)
rownames(weight_matrix) <- c("Male", "Female")
# Midler
snout_mean <- matrix(rep(mean(snout_matrix), 10), nrow = 2, byrow = TRUE)
rownames(snout_mean) <- c("Male", "Female")
weight_mean <- matrix(rep(mean(weight_matrix), 10), nrow = 2, byrow = TRUE)
rownames(weight_mean) <- c("Male", "Female")
# Treatment effect
snout_group_means <- matrix(c(rep(mean(snout_matrix[1, ]), 5),
rep(mean(snout_matrix[2, ]), 5)),
nrow = 2, byrow = TRUE)
rownames(snout_group_means) <- c("Male", "Female")
snout_treatment <- snout_group_means - snout_mean
rownames(snout_treatment) <- c("Male", "Female")
weight_group_means <- matrix(c(rep(mean(weight_matrix[1, ]), 5),
rep(mean(weight_matrix[2, ]), 5)),
nrow = 2, byrow = TRUE)
rownames(weight_group_means) <- c("Male", "Female")
weight_treatment <- weight_group_means - weight_mean
rownames(weight_treatment) <- c("Male", "Female")
# Residual
snout_residual <- snout_matrix - snout_group_means
rownames(snout_residual) <- c("Male", "Female")
weight_residual <- weight_matrix - weight_group_means
rownames(weight_residual) <- c("Male", "Female")
# Vis resultat for Snout
cat("Snout Vent Length:\n\n")
cat("Original data:\n"); print(snout_matrix)
cat("\nMean component:\n"); print(snout_mean)
cat("\nTreatment effect:\n"); print(snout_treatment)
cat("\nResidual:\n"); print(snout_residual)
# Vis resultat for Weight
cat("\n\nWeight:\n\n")
cat("Original data:\n"); print(weight_matrix)
cat("\nMean component:\n"); print(weight_mean)
cat("\nTreatment effect:\n"); print(weight_treatment)
cat("\nResidual:\n"); print(weight_residual)
# Som plot
library(tidyr)
library(dplyr)
library(ggplot2)
# ID og køn
ID <- paste0("Obs", 1:10)
Gender <- c(rep("Male", 5), rep("Female", 5))
# Rækkefølgebevarende faktor
ID <- factor(ID, levels = paste0("Obs", 1:10))
# ----- Snout -----
df_snout <- data.frame(
ID = ID,
Gender = Gender,
Mean = as.vector(snout_mean),
Treatment = as.vector(snout_treatment),
Residual = as.vector(snout_residual)
) %>%
pivot_longer(cols = c("Mean", "Treatment", "Residual"),
names_to = "Component", values_to = "Value")
# ----- Weight -----
df_weight <- data.frame(
ID = ID,
Gender = Gender,
Mean = as.vector(weight_mean),
Treatment = as.vector(weight_treatment),
Residual = as.vector(weight_residual)
) %>%
pivot_longer(cols = c("Mean", "Treatment", "Residual"),
names_to = "Component", values_to = "Value")
# ----- Plot Snout -----
ggplot(df_snout, aes(x = ID, y = Value, fill = Component)) +
geom_bar(stat = "identity") +
ggtitle("Dekomponering af Snout (Length)") +
ylab("cm") +
theme_minimal()
# ----- Plot Weight -----
ggplot(df_weight, aes(x = ID, y = Value, fill = Component)) +
geom_bar(stat = "identity") +
ggtitle("Dekomponering af Weight") +
ylab("kg") +
theme_minimal()
library(tidyr)
library(dplyr)
library(ggplot2)
# ID og køn
ID <- paste0("Obs", 1:10)
Gender <- c(rep("Male", 5), rep("Female", 5))
ID <- factor(ID, levels = paste0("Obs", 1:10))  # Rækkefølge
# ----- Snout -----
df_snout <- data.frame(
ID = ID,
Gender = Gender,
Mean = as.vector(snout_mean),
Treatment = as.vector(snout_treatment),
Residual = as.vector(snout_residual)
) %>%
pivot_longer(cols = c("Mean", "Treatment", "Residual"),
names_to = "Component", values_to = "Value") %>%
mutate(Component = factor(Component, levels = c("Mean", "Treatment", "Residual")))
# ----- Weight -----
df_weight <- data.frame(
ID = ID,
Gender = Gender,
Mean = as.vector(weight_mean),
Treatment = as.vector(weight_treatment),
Residual = as.vector(weight_residual)
) %>%
pivot_longer(cols = c("Mean", "Treatment", "Residual"),
names_to = "Component", values_to = "Value") %>%
mutate(Component = factor(Component, levels = c("Mean", "Treatment", "Residual")))
# ----- Plot Snout -----
ggplot(df_snout, aes(x = ID, y = Value, fill = Component)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Value, 1)),
position = position_stack(vjust = 0.5),
size = 3, color = "black") +
scale_fill_manual(values = c("Mean" = "#F8766D", "Treatment" = "#619CFF", "Residual" = "#00BA38")) +
ggtitle("Dekomponering af Snout (Length)") +
ylab("cm") +
theme_minimal()
# ----- Plot Weight -----
ggplot(df_weight, aes(x = ID, y = Value, fill = Component)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Value, 1)),
position = position_stack(vjust = 0.5),
size = 3, color = "black") +
scale_fill_manual(values = c("Mean" = "#F8766D", "Treatment" = "#619CFF", "Residual" = "#00BA38")) +
ggtitle("Dekomponering af Weight") +
ylab("kg") +
theme_minimal()
# Tilføj Gender label
gender <- c(rep("Female", 5), rep("Male", 5))
# Dataframes til snout
df_snout <- data.frame(
ID = factor(paste0("Obs", 1:10), levels = paste0("Obs", 1:10)),
Gender = gender,
Mean = as.vector(snout_mean),
Treatment = as.vector(snout_treatment),
Residual = as.vector(snout_residual)
) %>%
pivot_longer(cols = c("Mean", "Treatment", "Residual"),
names_to = "Component", values_to = "Value")
# Dataframes til weight
df_weight <- data.frame(
ID = factor(paste0("Obs", 1:10), levels = paste0("Obs", 1:10)),
Gender = gender,
Mean = as.vector(weight_mean),
Treatment = as.vector(weight_treatment),
Residual = as.vector(weight_residual)
) %>%
pivot_longer(cols = c("Mean", "Treatment", "Residual"),
names_to = "Component", values_to = "Value")
# ----- Plot Snout (med køn i farve) -----
ggplot(df_snout, aes(x = ID, y = Value, fill = Component)) +
geom_bar(stat = "identity") +
facet_wrap(~Gender, scales = "free_x") +
ggtitle("Dekomponering af Snout (Length) opdelt efter køn") +
ylab("cm") +
theme_minimal()
# ----- Plot Weight (med køn i farve) -----
ggplot(df_weight, aes(x = ID, y = Value, fill = Component)) +
geom_bar(stat = "identity") +
facet_wrap(~Gender, scales = "free_x") +
ggtitle("Dekomponering af Weight opdelt efter køn") +
ylab("kg") +
theme_minimal()
library(tidyr)
library(dplyr)
library(ggplot2)
# Tilføj Gender label
gender <- c(rep("Female", 5), rep("Male", 5))
ID <- factor(paste0("Obs", 1:10), levels = paste0("Obs", 1:10))
# ---- SNOUT ----
df_snout <- data.frame(
ID = ID,
Gender = gender,
Mean = as.vector(snout_mean),
Treatment = as.vector(snout_treatment),
Residual = as.vector(snout_residual)
) %>%
pivot_longer(cols = c("Mean", "Treatment", "Residual"),
names_to = "Component", values_to = "Value") %>%
mutate(Component = factor(Component, levels = c("Mean", "Treatment", "Residual")))
# ---- WEIGHT ----
df_weight <- data.frame(
ID = ID,
Gender = gender,
Mean = as.vector(weight_mean),
Treatment = as.vector(weight_treatment),
Residual = as.vector(weight_residual)
) %>%
pivot_longer(cols = c("Mean", "Treatment", "Residual"),
names_to = "Component", values_to = "Value") %>%
mutate(Component = factor(Component, levels = c("Mean", "Treatment", "Residual")))
# ---- Farver ----
custom_colors <- c("Mean" = "#F8766D", "Treatment" = "#619CFF", "Residual" = "#00BA38")
# ---- Plot SNOUT ----
ggplot(df_snout, aes(x = ID, y = Value, fill = Component)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Value, 1)),
position = position_stack(vjust = 0.5),
size = 3, color = "black") +
facet_wrap(~Gender, scales = "free_x") +
scale_fill_manual(values = custom_colors) +
ggtitle("Dekomponering af Snout (Length) opdelt efter køn") +
ylab("cm") +
theme_minimal()
# ---- Plot WEIGHT ----
ggplot(df_weight, aes(x = ID, y = Value, fill = Component)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Value, 1)),
position = position_stack(vjust = 0.5),
size = 3, color = "black") +
facet_wrap(~Gender, scales = "free_x") +
scale_fill_manual(values = custom_colors) +
ggtitle("Dekomponering af Weight opdelt efter køn") +
ylab("kg") +
theme_minimal()
# Udtræk data for hver gruppe (kun numeriske kolonner)
Xf <- T6.19[T6.19$Gender == "Female", 1:2]  # Snout og Weight
Xm <- T6.19[T6.19$Gender == "Male", 1:2]
# Gruppestørrelser
n1 <- nrow(Xf)
n2 <- nrow(Xm)
p <- ncol(Xf)  # Antal variable
# Gruppemiddelværdier
xbar1 <- colMeans(Xf)
xbar2 <- colMeans(Xm)
# Pooled kovariansmatrix
S1 <- cov(Xf)
S2 <- cov(Xm)
Spooled <- ((n1 - 1)*S1 + (n2 - 1)*S2)/(n1 + n2 - 2)
# Hotelling’s T² teststørrelse
T2 <- (n1 * n2) / (n1 + n2) * t(xbar1 - xbar2) %*% solve(Spooled) %*% (xbar1 - xbar2)
# Kritisk værdi og p-værdi
F_crit <- ((n1 + n2 - 2) * p / (n1 + n2 - p - 1)) * qf(0.95, p, n1 + n2 - p - 1)
F_val <- ((n1 + n2 - p - 1) * T2) / ((n1 + n2 - 2) * p)
p_val <- 1 - pf(F_val, p, n1 + n2 - p - 1)
# Udskriv resultat
cat("Hotelling’s T² test:\n")
cat("T² =", round(T2, 4), "\n")
cat("F =", round(F_val, 4), "\n")
cat("p-værdi =", format.pval(p_val, digits = 5), "\n")
# 1. Generaliseret stikprøvevarians for pooled matrix
Xf <- T6.19[T6.19$Gender == "Female", 1:2]
Xm <- T6.19[T6.19$Gender == "Male", 1:2]
n1 <- nrow(Xf); n2 <- nrow(Xm)
S1 <- cov(Xf); S2 <- cov(Xm)
Spooled <- ((n1 - 1)*S1 + (n2 - 1)*S2)/(n1 + n2 - 2)
# Determinant = generaliseret varians
gen_var <- det(Spooled)
cat("Generaliseret stikprøvevarians (|S|):", round(gen_var, 4))
cat("\n|S| udtrykker den samlede multivariate variation og volumen i datasættet.\n",
"En høj værdi indikerer stor spredning i både længde og vægt.\n")
cat("Generaliseringen |S| = |D| ⋅ |R| viser, at varians og korrelation sammen bestemmer spredningens volumen.\n")
cat("Bemærk: Determinanten af Spooled-matrixen fungerer som en generaliseret stikprøvevarians.\n",
"En lav værdi tyder på høj korrelation mellem variablerne, mens en høj værdi tyder på større uafhængighed.\n")
#Grafisk med ellipse pakken
library(ellipse)
# Brug Spooled og center i forskellen mellem køn
Xf <- T6.19[T6.19$Gender == "Female", 1:2]
Xm <- T6.19[T6.19$Gender == "Male", 1:2]
xbar1 <- colMeans(Xf)
xbar2 <- colMeans(Xm)
diff_mean <- xbar1 - xbar2
n1 <- nrow(Xf); n2 <- nrow(Xm)
Spooled <- ((n1 - 1)*cov(Xf) + (n2 - 1)*cov(Xm))/(n1 + n2 - 2)
n <- (n1 * n2) / (n1 + n2)
alpha <- 0.05
p <- 2
T2_crit <- ((n1 + n2 - 2) * p / (n1 + n2 - p - 1)) * qf(1 - alpha, p, n1 + n2 - p - 1)
# Plot
plot(ellipse(Spooled / n, centre = diff_mean, level = 1 - alpha,
t = sqrt(T2_crit)), type = "l", col = "darkblue",
xlab = "Snout Vent Length (cm)", ylab = "Weight (kg)",
main = "Hotelling’s T² Ellipse (Volumen ≈ |S|)")
points(0, 0, pch = 4, col = "red")
text(0, 0, "0", pos = 1, cex = 0.8)
# Grafisk uden ellipse pakken
# Parametre
xbar1 <- colMeans(Xf)
xbar2 <- colMeans(Xm)
diff_mean <- xbar1 - xbar2
n <- (n1 * n2) / (n1 + n2)
alpha <- 0.05
p <- 2
T2_crit <- ((n1 + n2 - 2) * p / (n1 + n2 - p - 1)) * qf(1 - alpha, p, n1 + n2 - p - 1)
# Generér ellipse uden ellipse-pakke
theta <- seq(0, 2*pi, length.out = 200)
circle <- cbind(cos(theta), sin(theta))
A <- chol(Spooled / n * T2_crit)
ellipse_coords <- t(diff_mean + t(circle %*% A))
# Plot
plot(ellipse_coords, type = "l", lwd = 2, col = "black",
xlab = "Snout Vent Length (cm)", ylab = "Weight (kg)",
main = "Hotelling’s T² Ellipse (uden ellipse-pakke)")
points(0, 0, col = "blue", pch = 19)
text(0, 0, "0", pos = 1)
points(diff_mean[1], diff_mean[2], pch = 19, col = "darkblue")
#text(diff_mean[1], diff_mean[2], "M1 - M2", pos = 4, col = "darkblue")
text(diff_mean[1], diff_mean[2], expression(mu[1] - mu[2]), pos = 4, col = "darkblue")
# Multivariat variansanalyse (MANOVA)
model_manova <- manova(cbind(`Snout Vent Length (cm)`, `Weight (kg)`) ~ Gender, data = T6.19)
# Samlet test med summary
summary(model_manova, test = "Wilks")
library(dplyr)
# Data: responsvariabler og grupper
Y <- T6.19[, 1:2]  # Snout & Weight
group <- T6.19$Gender
n1 <- sum(group == "Female")
n2 <- sum(group == "Male")
g <- 2
p <- ncol(Y)
n_total <- nrow(Y)
# Fit MANOVA-model
fit <- manova(as.matrix(Y) ~ group)
# Kort metode – direkte Wilks-test
summary(fit, test = "Wilks")
# Lang metode – Udtræk SSCP-matricer
B <- summary(fit)$SS$group
W <- summary(fit)$SS$Residuals
T_mat <- B + W
# Frihedsgrader
df1 <- p * (g - 1)          # for behandling
df2 <- p * (n_total - g)    # for residualer
# Wilks' lambda
lambda <- det(W) / det(T_mat)
# Chi-i-anden Bartletts korrektion (Resultat 6.8 / 6.43)
m <- (n1 + n2 - 2) - (p + g) / 2
chi2_stat <- -m * log(lambda)
chi2_crit <- qchisq(0.95, df1)
pval_chi2 <- pchisq(chi2_stat, df1, lower.tail = FALSE)
# Udskriv resultater
cat("Wilks’ lambda: ", round(lambda, 4), "\n")
cat("Chi²-test (Bartletts korrektion):\n")
cat("Teststatistik:", round(chi2_stat, 3), "\n")
cat("Kritisk værdi (χ², 95%, df =", df1, "):", round(chi2_crit, 3), "\n")
cat("p-værdi:", signif(pval_chi2, 4), "\n")
cat("Konklusion: ", ifelse(pval_chi2 < 0.05, "Forkast H₀ – Køn påvirker mindst én af variablerne.", "Forkast ikke H₀ – Ingen forskel."), "\n")
# Box’s M test for lighed i kovariansmatricer
# Forudsæt: T6.19 har kolonner: Snout Vent Length (cm), Weight (kg), Gender
library(dplyr)
# Del op efter køn
Xf <- T6.19 %>%
filter(Gender == "Female") %>%
dplyr::select(`Snout Vent Length (cm)`, `Weight (kg)`)
Xm <- T6.19 %>%
filter(Gender == "Male") %>%
dplyr::select(`Snout Vent Length (cm)`, `Weight (kg)`)
n1 <- nrow(Xf)
n2 <- nrow(Xm)
p <- ncol(Xf)
g <- 2
n_total <- n1 + n2
# Kovariansmatricer
S1 <- cov(Xf)
S2 <- cov(Xm)
# Determinanter
detS1 <- det(S1)
detS2 <- det(S2)
# Spooled
Spooled <- ((n1 - 1) * S1 + (n2 - 1) * S2) / (n_total - g)
detSpooled <- det(Spooled)
# Box's M test statistik
M <- (n1 - 1) * log(detSpooled / detS1) + (n2 - 1) * log(detSpooled / detS2)
# Korrektionsfaktor
u <- ((1 / (n1 - 1)) + (1 / (n2 - 1)) - (1 / (n_total - g))) *
(2 * p^2 + 3 * p - 1) / (6 * (p + 1) * (g - 1))
C <- (1 - u) * M
df <- p * (p + 1) * (g - 1) / 2
pval <- pchisq(C, df, lower.tail = FALSE)
# Resultat
cat("Box’s M test:\n")
cat("Teststatistik:", round(C, 3), "\n")
cat("Frihedsgrader:", df, "\n")
cat("p-værdi:", signif(pval, 4), "\n")
cat("Konklusion: ", ifelse(pval < 0.05,
"Forkast H₀ – kovariansmatricerne er forskellige.",
"Forkast ikke H₀ – antag ens kovariansmatricer."), "\n")
library(MASS)
# Del data
Xf <- T6.19[T6.19$Gender == "Female", 1:2]
Xm <- T6.19[T6.19$Gender == "Male", 1:2]
# Parametre
xbar1 <- colMeans(Xf)
xbar2 <- colMeans(Xm)
diff_mean <- xbar1 - xbar2
n1 <- nrow(Xf); n2 <- nrow(Xm)
p <- ncol(Xf)
n <- (n1 * n2) / (n1 + n2)
Spooled <- ((n1 - 1)*cov(Xf) + (n2 - 1)*cov(Xm)) / (n1 + n2 - 2)
# Kritiske værdier
alpha <- 0.05
t_crit <- qt(1 - alpha/(2*p), df = n1 + n2 - 2)  # Bonferroni
T2_crit <- ((n1 + n2 - 2)*p / (n1 + n2 - p - 1)) * qf(1 - alpha, p, n1 + n2 - p - 1)  # T²
# Bonferroni-interval (rektangel)
margin <- t_crit * sqrt(diag(Spooled) / n)
rect_coords <- rbind(
diff_mean + c(-margin[1], -margin[2]),
diff_mean + c( margin[1], -margin[2]),
diff_mean + c( margin[1],  margin[2]),
diff_mean + c(-margin[1],  margin[2]),
diff_mean + c(-margin[1], -margin[2])
)
# T²-ellipse
theta <- seq(0, 2*pi, length.out = 200)
circle <- cbind(cos(theta), sin(theta))
A <- chol(Spooled / n * T2_crit)
ellipse_coords <- t(diff_mean + t(circle %*% A))
# Plot
plot(ellipse_coords, type = "l", col = "blue", lwd = 2,
xlab = "Snout Vent Length (cm)", ylab = "Weight (kg)",
main = "Konfidensellipse (T²) og Bonferroni-rektangel")
lines(rect_coords, col = "red", lty = 2, lwd = 2)
points(0, 0, pch = 4, col = "black")
text(0, 0, "0", pos = 1)
points(diff_mean[1], diff_mean[2], col = "blue", pch = 19)
text(diff_mean[1], diff_mean[2], expression(mu[1] - mu[2]), pos = 4, cex = 0.8)
legend("topright", legend = c("T²-ellipse", "Bonferroni-interval"),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
